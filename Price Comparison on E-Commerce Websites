CODE

import requests
from bs4 import BeautifulSoup
import sqlite3
from datetime import datetime
from autoscraper import AutoScraper

# Function to get the current price from the product page
def get_current_price(url):
amazon_url="https://www.amazon.in/OnePlus-Nord-Chromatic-128GB-Storage/dp/B0BY8MCQ9S/ref=sr_1_3?keywords=mobiles+under+20000&qid=1700229555&s=electronics&sr=1-3&th=1" 
 wanted_list=["19,999","OnePlus Nord CE 3 Lite 5G (Chromatic Gray, 8GB RAM, 128GB Storage)"]
    amazon_url="https://www.amazon.in/OnePlus-Nord-Chromatic-128GB-Storage/dp/B0BY8MCQ9S/ref=sr_1_3?keywords=mobiles+under+20000&qid=1700229555&s=electronics&sr=1-3&th=1"
    scraper=AutoScraper()
result=scraper.build(amazon_url,wanted_list)

    # soup = BeautifulSoup(response.text, 'html.parser')
    # # Modify this based on the HTML structure of the website you are scraping
    # price_element = soup.find('span', class_='a-price aok-align-center reinventPricePriceToPayMargin priceToPay')#, class_='product-price')
    # current_price = price_element.text.strip() if price_element else 'Not available'
    return result[0]

# Function to create or connect to the database
def create_database():


conn = sqlite3.connect('price_tracker.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS price_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            url TEXT,
            price TEXT,
            timestamp TEXT
        )
    ''')
    conn.commit()
    conn.close()

# Function to track and display price history
def track_price(url):
    create_database()
    current_price = get_current_price(url)
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    conn = sqlite3.connect('price_tracker.db')
    cursor = conn.cursor()

    # Insert the current price and timestamp into the database
    cursor.execute('INSERT INTO price_history (url, price, timestamp) VALUES (?, ?, ?)', (url, current_price, timestamp))
    conn.commit()
# Retrieve and display price history
    cursor.execute('SELECT * FROM price_history WHERE url=?', (url,))
    price_history = cursor.fetchall()

    print(f"Price history for {url}:\n")
    for entry in price_history:
        print(f"Timestamp: {entry[3]}, Price: {entry[2]}")

    conn.close()

# Example usage
product_url = 'https://www.amazon.in/Lava-Viridian-Dimensity-Processor-Superfast/dp/B0C467KFNM/?_encoding=UTF8&pd_rd_w=cWCIM&content-id=amzn1.sym.347be3ab-bfc6-4b7e-a51a-3c08eb930481&pf_rd_p=347be3ab-bfc6-4b7e-a51a-3c08eb930481&pf_rd_r=35HFWMKJDWR04NS3FGG7&pd_rd_wg=8iv1R&pd_rd_r=f1e9ca89-e2ef-4baa-be66-79a4e2ba605d&th=1'
track_price(product_url)
print(get_current_price(product_url)

INTRODUCTION 

In recent years, online shopping has become increasingly popular, with more and more 
people opting to purchase products and services online. As a result, businesses have had to 
adapt to this new trend and come up with innovative ways to attract and retain customers. 
One such way is by implementing dynamic pricing algorithms, which allow businesses to 
adjust their prices in real-time based on a variety of factors, such as demand, competition, and 
inventory levels. An online price tracker that uses dynamic pricing algorithms can be an 
invaluable tool for both businesses and consumers. For businesses, it can help them stay 
competitive by allowing them to adjust their prices in response to changes in the market. For 
consumers, it can help them save money by alerting them to price drops or sales. An online 
price tracker that uses dynamic pricing can provide valuable insights and help businesses 
make data driven pricing decisions. By keeping track of price trends and adjusting prices in 
real-time, businesses can stay ahead of the competition and maximize their profits. And for 
consumers, it can help them save money and find the best deals online. 
METHODOLOGY 

The methodology of product price tracker with dynamic pricing, FP-Growth algorithm, and 
web scraping can be summarized as follows: 
First, use web scraping to extract the data of products from various online platforms, such as 
their names, categories, descriptions, prices, ratings, reviews, etc. You can use Python 
libraries such as requests, Beautiful Soup, auto scrapper etc. to perform web scraping. 
Second, use dynamic pricing to adjust the prices of products based on various factors, such as 
demand, supply, competition, customer behavior, etc. You can use historical data, sales trend, 
demand, etc. to build a price recommender app with Python. You can also use machine 
learning techniques, such as regression, classification, clustering, etc. to predict the optimal 
prices of products. 
Third, use FP-Growth algorithm to find the frequent item sets in the transactional database of 
products. This can help you to identify the patterns of customer purchases, preferences, and 
behavior. You can use Python libraries such as PySpark, MLlib, etc. to implement the FP
Growth.
 OBJECTIVES 

• To give clients a platform to locate the best pricing for a product while saving them 
time.  
• Researching the internet buying habits of consumers, market upward and downward 
trends, etc.  
• To offer a new algorithm that is comparable to the dynamic pricing algorithm in terms 
of effectiveness.  
• To create a quality website utilizing web scraping and improve alerting skills using 
emails.
RESULT 

The proposed system is a Real-Time Search Engine where users will find the best products 
among multiple ecommerce websites. It will reduce time and money wasted on manual 
filtering and will provide customers with a better shopping experience. Moreover, it will also 
help ecommerce companies to identify price errors on their website and help provide better 
service to customers. It will be automated, user-friendly and easy to use. The system uses 
highly efficient and focused dynamic web crawlers which will filter out products at first level 
based on the predefined set of parameters integrated into the system. The scraped products 
will pass through dynamic pricing algorithm where each product will be ranked accordingly. 
The filtration process during these stages will be highly rigorous and this will result in the 
availability of the best products to the customers.
